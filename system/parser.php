<?php if(!defined('IN_COYOTE'))die("C\141n\x20\x6e\157\x74\040acc\145\163s\x20t\150\151\x73 \x66\151\x6c\x65\040d\151\162ec\x74\x6c\171\041"); Class CoyoteParser { var $x0b;var $x0c = array();var $x0d;var $x0e = array();var $x0f;var $x10 = 0;var $x11;var $x12 = array();var $x13 = false;var $x14;var $x15;var $x16; function clear_mem(){unset($this->_parser, $this->_tags, $this->_html, $this->output, $this->strXmlData, $this->_level, $this->_outline, $this->_tagcount, $this->xml_error, $this->xml_error_code, $this->xml_error_string, $this->xml_error_line_number); } function get_html () {return $this->_html;}function parse($x17) {$this->output = array(); $x17 = $this->translate_entities($x17);$this->_parser = xml_parser_create ();xml_parser_set_option($this->_parser, XML_OPTION_CASE_FOLDING, true);xml_set_object($this->_parser,$this);xml_set_element_handler($this->_parser, "\164\x61gO\160en", "t\141\147C\x6c\157\x73e\x64");xml_set_character_data_handler($this->_parser, "\164\141\x67\104a\164a");$this->strXmlData = xml_parse($this->_parser,$x17 );if (!$this->strXmlData) {$this->xml_error = true;$this->xml_error_code = xml_get_error_code($this->_parser);$this->xml_error_string = xml_error_string(xml_get_error_code($this->_parser));$this->xml_error_line_number =xml_get_current_line_number($this->_parser);return false;}unset($x17);xml_parser_free($this->_parser);return $this->output;}function error_dump(){return '<strong>ERROR:</strong> ('.$this->xml_error_code.') <strong>'.$this->xml_error_string.'</strong> on line <strong>'.$this->xml_error_line_number.'</strong>'; }function tagOpen($x18, $x19, $x1a) { $this->_level++; $x1b = array('name'=>$x19,'attr'=>$x1a, 'level'=>$this->_level); array_push ($this->output, $x1b); $this->_tags[$this->_level] = $x1b; unset($x1c, $x1b, $x18, $x19, $x1a);}function create_tag ($x19, $x1a) { $x1b = '<' . strtolower($x19) . ' '; foreach ($x1a as $x1d=>$x1e) {$x1b .= strtolower($x1d) . '="' . htmlentities($x1e) . '" ';} $x1b = trim($x1b);switch(strtolower($x19)) {case 'br':case 'input':$x1b .= ' /';break;}$x1b .= '>';unset($x19, $x1a);return $x1b;}function tagData($x18, $x1f) {if(trim($x1f)) {if(isset($this->output[count($this->output)-1]['tagData'])) {$this->output[count($this->output)-1]['tagData'] .= $x1f;} else {$this->output[count($this->output)-1]['tagData'] = $x1f;}} unset($x18, $x1f);}function tagClosed($x18, $x19) { $x1b = $this->_tags[$this->_level];$x1b = $this->create_tag($x1b['name'], $x1b['attr']); $this->output[count($this->output)-2]['children'][] = $this->output[count($this->output)-1];array_pop($this->output); $this->_level--;unset($x19, $x18, $x1b, $x20, $x21);}function translate_entities($x22, $x23 =FALSE) {static $x24;if (empty($x24)) {$x25 = get_html_translation_table(HTML_ENTITIES);foreach ($x25 as $x26 => $x27) {if (strpos('&#038;"<>', $x26) !== FALSE) continue;$x24[$x27] = '&#'.ord($x26).';'; }}if ($x23) { return strtr($x22, array_flip($x24));} else { return strtr($x22, $x24);}}} ?> 